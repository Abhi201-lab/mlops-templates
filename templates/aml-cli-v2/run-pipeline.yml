# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License.

parameters:
  - name: pipeline_file
    type: string
  - name: experiment_name
    type: string
  - name: display_name
    type: string
  - name: enable_monitoring
    type: string
    default: 'false'
  - name: azure_client_id
    type: string
  - name: azure_tenant_id
    type: string
  - name: key_vault_name
    type: string
  - name: synapse_workspace_url
    type: string
  - name: adls_account
    type: string
  - name: adls_fs_name
    type: string
  - name: redis_name
    type: string
  - name: webapp_name
    type: string
    
steps:
  - task: AzureCLI@2
    displayName: Run Azure ML pipeline
    continueOnError: true
    inputs: 
      azureSubscription: $(ado_service_connection_rg) #needs to have access at the RG level 
      scriptType: bash
      workingDirectory: $(System.DefaultWorkingDirectory)
      scriptLocation: inlineScript
      inlineScript: |
        run_id=$(az ml job create -f ${{ parameters.pipeline_file }} \
          --set experiment_name=${{ parameters.experiment_name }} \
          --set inputs.enable_monitoring=${{ parameters.enable_monitoring }} \
          --set azure_client_id=${{ parameters.azure_client_id }} \
          --set azure_tenant_id=${{ parameters.azure_tenant_id }} \
          --set key_vault_name=${{ parameters.key_vault_name }} \
          --set synapse_workspace_url=${{ parameters.synapse_workspace_url }} \
          --set adls_account=${{ parameters.adls_account }} \
          --set adls_fs_name=${{ parameters.adls_fs_name }} \
          --set redis_name=${{ parameters.redis_name }} \
          --set webapp_name=${{ parameters.webapp_name }} \
          display_name=${{ parameters.display_name }} --query name -o tsv)
        if [[ -z "$run_id" ]]
        then
          echo "Job creation failed"
          exit 3
        fi
        az ml job show -n $run_id --web
        status=$(az ml job show -n $run_id --query status -o tsv)
        if [[ -z "$status" ]]
        then
          echo "Status query failed"
          exit 4
        fi
        running=("NotStarted" "Queued" "Starting" "Preparing" "Running" "Finalizing" "CancelRequested")
        while [[ ${running[*]} =~ $status ]]
        do
          sleep 15 
          status=$(az ml job show -n $run_id --query status -o tsv)
          echo $status
        done
        if [[ "$status" != "Completed" ]]  
        then
          echo "Training Job failed or canceled"
          exit 3
        fi
